************************************
*     S4 Reference                 *
************************************

*** ARITHMETIC ***
+   (a b--n)      n: a+b - addition
-   (a b--n)      n: a-b - subtraction
*   (a b--n)      n: a*b - multiplication
/   (a b--q)      q: a/b - division
'%  (a b--r)      r: a%b - modulo
'-  (a--b)        b: -a  - negate
'/  (a b--q r)    q: div(a,b), r: modulo(a,b) - /MOD


*** BIT MANIPULATION ***
&  (a b--n)       n: a and b
|  (a b--n)       n: a or b
^  (a b--n)       n: a xor b
~  (a--b)         b: not a (e.g - 1011 => 0100)


*** STACK ***
#  (a--a a)       Duplicate TOS             (Forth DUP)
\  (a b--a)       Drop TOS                  (Forth DROP)
$  (a b--b a)     Swap top 2 stack items    (Forth SWAP)
%  (a b--a b a)   Push 2nd                  (Forth OVER)


*** MEMORY ***
@     (a--n)      Fetch CELL n from address a
!     (n a--)     Store CELL n  to  address a
`@    (a--n)      Fetch BYTE n from address a
`!    (n a--)     Store BYTE n  to  address a


*** REGISTERS ***
  NOTES: 1) Register names are 1 to 3 lowercase characters: [a..zzz]
         2) The number of registers is controlled by the NUM_REGS #define in "config.h"
      Register initial values:
         - f: Start of function memory (ABSOLUTE)
         - h: HERE **special**
         - i: Loop index **special**
         - r: Start of register memory (ABSOLUTE)
         - s: Start of system structure (ABSOLUTE)
         - u: Start of USER memory (ABSOLUTE)
         - z: Size of USER area
         - All other registers are set to 0
xxx  (--n)        Push address of register X


*** FUNCTIONS ***
        NOTES: 1) Function names are 1 to 3 uppercase characters: [A..ZZZ]
               2) The number of functions is controlled by the NUM_FUNCS #define in "config.h"
:     (--)        Define function. Copy chars to (HERE++) until closing ';'.
XXX   (--)        Call function XXX
;     (--)        Return: PC = rpop()
        NOTE: returning while inside of a loop is not supported; behavior will be undefined.
        NOTE: outside of ':...;', ';' can be used to comment out the rest of the line


*** INPUT/OUTPUT ***
.     (N--)       Output N as decimal number
,     (N--)       Output N as character (Forth EMIT)
"     (--)        Output characters until the next '"'
0..9  (--n)       Scan DECIMAL number until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use "negate" (eg - 490`-)
'x    (--n)       n: the ASCII value of x


*** CONDITIONS/LOOPS/FLOW CONTROL ***
<     (a b--f)    f: (a < b) ? 1 : 0;
=     (a b--f)    f: (a = b) ? 1 : 0;
>     (a b--f)    f: (a > b) ? 1 : 0;
_     (x--f)      f: (x = 0) ? 1 : 0; (logical NOT)
[     (F T--)     FOR: start a For/Next loop. if (T < F), swap T and F
]     (--)        NEXT: increment index (i) and loop if (i@ <= T)
{     (f--f)      BEGIN: if (f == 0) skip to matching }
}     (f--f?)     WHILE: if (f != 0) jump to matching { else drop f and continue
i@    (--n)       n: the index of the current FOR loop
(     (f--)       if (f != 0), execute code in '()', else skip to matching ')'


*** OTHER ***
`BL   (n--)       PC: Load code from file (block-nnn.src). This can be nested.
`BC   (h--)       PC: Block close
`BOR  (--h)       PC: Block open (read)
`BOW  (--h)       PC: Block open (write)
`BR   (h--c f)    PC: Block read one byte (f = 0 and c = 0 on EOF or error)
`BW   (c h--f)    PC: Block write one byte (f = 0 on error)
`LA   (--)        PC: Load Abort: to stop loading a block (eg - if the block has already been loaded)
`PI   (p--)       Arduino: pin input  (pinMode(p, INPUT))
`PU   (p--)       Arduino: pin pullup (pinMode(p, INPUT_PULLUP))
`PO   (p--)       Arduino: pin output (pinMode(p, OUTPUT)
`PRA  (p--n)      Arduino: pin read analog  (n = analogRead(p))
`PRD  (p--n)      Arduino: pin read digital (n = digitalRead(p))
`PWA  (n p--)     Arduino: pin write analog  (analogWrite(p, n))
`PWD  (n p--)     Arduino: pin write digital (digitalWrite(p, n))
`R    (n--r)      r: a random number in the range [0..(n-1)]
                  NB: if n=0, r is the entire 32-bit random number
`T    (--n)       Milliseconds (Arduino: millis(), Windows: GetTickCount())
`N    (--n)       Microseconds (Arduino: micros(), Windows: N/A)
`W    (n--)       Wait (Arduino: delay(),  Windows: Sleep())
`q    (--)        PC: Exit S4
