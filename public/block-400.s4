0(Genetic evolution)

0(Save the current state)
 1xBL
10xBL

0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(A crude approximation of TANH)
0(TNH (a--b): b=TanH(a);
:TNH 83*100/ 99 MIN 99_ MAX;

0(----------------------------------------)
0(constants)
 10 sNCR               0(Number of critters)
  8 sNCN               0(Number of connections)
  4 sNHC               0(Number of hidden connections)
100 sWSX               0(World sz X)
 30 sWSY               0(World sz Y)

rWSX rWSY* sWSZ        0(World size)
rNCN 4* 4+ sCSZ        0(Critter sze)

0(----------------------------------------)
0(Random numbers)
0(Random 8/16-bit #)
:RNDBYTE h100 xR;
:RNDWORD h10000 xR;

0(Random world x/y (--n))
:RWX rWSX xR 1+;         
:RWY rWSY xR 1+;

0(----------------------------------------)
0(world stuff)
VAR sWLD rWSZ ALLOT
:WXN 0 MAX rWSX MIN;   0(World X normalize (--x))
:WYN 0 MAX rWSY MIN;   0(World Y normalize (--y))
0(world set/get at x/y)
:WOFF $ rWSX* + rWLD+;  0(Offset to cell (x y--a))
:WSET WOFF c!;          0(World Set (c x y--))
:WGET WOFF c@;          0(World Get (x y--c))

0(----------------------------------------)
0(----- connections -----)

0(A connection is a single 32-bit value)
0([input]      [output]      [weight])
0([type] [id]  [type] [id]   [weight]
0([0]    [1-7] [8]    [9-15] [16-31])
0(type 0:input/output, 1:hidden)

0(connection/nodes)
0(num connections)
0(Type/ID (n--t id))
:TID 128& % 16 $(\rNHC) ^;
0(connection weight (a--w))
:CONNWT 2+ WDR 81/;
0(dump connection DCN (a--))
:DCT TID$"(%d,%d)";
:DCN # c@ N" in:"DCT #1+ c@", out:"DCT CONNWT", wt:"#." ("TNH.")";

0(----------------------------------------)
0(critters)
0(Critter structure: 4 bytes + connections)
0([x][y][col][0][connections])

0(num critters)
100 sNCR
0(critter size)
rNCN xIC* 4+ sCSZ

0(rCR: Current critter)
0(rCRS: Critters start)
VAR sCRS
rNCR rCSZ * ALLOT

0(SCR (n--): Set critter)
:SCR 1- rCSZ* rCRS+ sCR;

0(Critter X/Y)
:CXY rCR c@ rCR 1+ c@; 0(Critter Get XY(--x y))
:CSX WXN rCR c!;       0(Critter Set X(n--))
:CSY WYN rCR 1+ c!;    0(Critter Set Y(n--))
:RXY RWX CSX RWY CSY;  0(Critter Set Random XY(--))

0(Critter Painting)
:CRSETCOL rCR 3+ c!;       0(n--)
:CRGETCOL rCR 3+ c@;       0(--n)
:RNDCOL 8xR 31+ CRSETCOL;  0(--)
:CRPAINT CXY GOTOXY CRGETCOL 40 SETCOL "*";
:PAINTALL CUROFF 1 rNCR[rI SCR CRPAINT]CLRCOL CURON;

0(Create a Random Critter(s))
:RNDCR rCR s1 1 rCSZ[256 xR r1 c! i1] RXY RNDCOL;
:RNDALL 1 rNCR[rI SCR RNDCR];

0(Dump critter(s))
:DUMPCR CRGETCOL CXY$"xy: (%d,%d), col: %d, %n" rCR 4+ s1 1 rNCN[r1 DCN r1 4+ s1 CR];
:DUMPALL 1 rNCR[rI "Critter #%d: " rI SCR DUMPCR CR];

0(FB (a--b): Flip one random bit)
:FB 1 8xR SHL %% b&(b~b&;)b|;

0(CPB (a--b): Copy 1 byte w/possible mutation)
:CPB 125 xR 7=(FB;);

0(CRADDR (N--A): A: address of critter #N)
:CRADDR rCR s1 SCR rCR r1 sCR;

0(COPYCA (F T--): Copy critter at F to critter at T)
:COPYCR s2 s1 1 rCSZ[r1 c@ CPB r2 c! i1 i2];

0(COPYCRITTER (T--): Copy Current critter to critter #T)
:COPYCRITTER rCR s9 CRADDR s1 r9 r1 COPYCR r1 sCR RXY RNDCOL r9 sCR;

RNDALL DUMPALL
:DM 1{\ RNDALL PAINTALL xK? 0=}xK@ \;

0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(-RELOAD BLOCK-)
:RL 400 xBL;
