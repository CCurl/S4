************************************
*     S4 Reference                 *
************************************

*** ARITHMETIC ***
+  (a b--a+b)     addition
-  (a b--a-b)     subtraction
*  (a b--a*b)     multiplication
/  (a b--a/b)     division


*** BIT MANIPULATION ***
&  (a b--n)       and
|  (a b--n)       or
^  (a b--n)       xor
~  (n1--n2)       one's complement (e.e - 1011 => 0100)


*** STACK ***
#  (a--a a)       Duplicate TOS                          (Forth DUP)
\  (a b--a)       Drop TOS                               (Forth DROP)
$  (a b--b a)     Swap top 2 stack items                 (Forth SWAP)
%  (a b--a b a)   Push 2nd                               (Forth OVER)


*** MEMORY ***
`@    (a--n)      Fetch byte n from address a
`!    (n a--)     Store byte n  to  address a
@     (a--n)      Fetch CELL n from address a
!     (n a--)     Store CELL n  to  address a


*** REGISTERS ***
  NOTES: A register name is 1 lowercase character: [a..z]
      Register initial values:
         - f: Start of function memory (ABSOLUTE)
         - h: HERE **special**
         - i: Loop index **special**
         - r: Start of register memory (ABSOLUTE)
         - s: Start of system structure (ABSOLUTE)
         - u: Start of USER memory (ABSOLUTE)
         - z: Size of USER area
         - All other registers are set to 0
x   (--n)         Push address of register X


*** FUNCTIONS ***
  NOTES: 1) Function names are 1 to 2 uppercase characters: [A.ZZ]
:   (--)         Define function. Copy chars to (HERE++) until closing ';'.
XX  (--)         Call function XX
;   (--)         Return from routine: PC = rpop()
         NOTE: returning while inside of a loop is not supported; behavior will be undefined.
         NOTE: outside of ':;', ';' can be used to comment out the rest of the line


*** INPUT/OUTPUT ***
.     (N--)       Output N as decimal number
,     (N--)       Output N as character (Forth EMIT)
"     (--)        Output characters until the next '"'
0..9  (--n)       Scan DECIMAL number until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use 'V' (eg - '490~1+')
'x    (--n)       n: the ASCII value of x


*** CONDITIONS/LOOPS/FLOW CONTROL ***
<   (a b--f)     f: (a < b) ? 1 : 0;
=   (a b--f)     f: (a = b) ? 1 : 0;
>   (a b--f)     f: (a > b) ? 1 : 0;
_   (x--f)       f: (x = 0) ? 1 : 0; (logical NOT)
[   (F T--)      FOR: start a For/Next loop. if (T < F), swap T and F
]   (--)         NEXT: increment index (I) and loop if (I <= T)
             NOTE: For loops CAN be nested
i@  (--n)        n: the index of the current FOR loop
(   (f--)        if (f != 0), execute code in '()', else skip until matching ')'


*** OTHER ***
`BL   (n--)        PC: Load code from file (block-nnn.src). This can be nested.
`BC   (h--)        PC: Block close
`BO   (--h)        PC: Block open (write)
`Bo   (--h)        PC: Block open (read)
`LA   (--)         PC: Load Abort: to stop loading a block (eg - if the block has already been loaded)
`PI   (p--)        Arduino: pin input  (pinMode(p, INPUT))
`PU   (p--)        Arduino: pin pullup (pinMode(p, INPUT_PULLUP))
`PO   (p--)        Arduino: pin output (pinMode(p, OUTPUT)
`PRA  (p--n)       Arduino: pin read analog  (n = analogRead(p))
`PRD  (p--n)       Arduino: pin read digital (n = digitalRead(p))
`PWA  (n p--)      Arduino: pin write analog  (analogWrite(p, n))
`PWD  (n p--)      Arduino: pin write digital (digitalWrite(p, n))
`T     (--n)       Time (Arduino: millis(), Windows: GetTickCount())
`W     (n--)       Wait (Arduino: delay(),  Windows: Sleep())
``    (--)         Exit S4
