************************************
*     S4 Reference                 *
************************************

*** ARITHMETIC ***
+   (a b--n)      n: a+b - addition
-   (a b--n)      n: a-b - subtraction
*   (a b--n)      n: a*b - multiplication
/   (a b--q)      q: a/b - division
`%  (a b--r)      r: a%b - modulo
`/  (a b--q r)    q: div(a,b), r: modulo(a,b) - /MOD


*** BIT MANIPULATION ***
&  (a b--n)       n: a and b
|  (a b--n)       n: a or b
^  (a b--n)       n: a xor b
~  (a--b)         b: ones-complement a (e.g - 1011 => 0100)


*** STACK ***
#  (a--a a)       Duplicate TOS             (DUP)
\  (a b--a)       Drop TOS                  (DROP)
$  (a b--b a)     Swap top 2 stack items    (SWAP)
%  (a b--a b a)   Push 2nd                  (OVER)
`- (a--b)         b: -a  -                  (Negate)
`A (a--b)         b: abs(a)                 (Absolute)


*** MEMORY ***
@     (a--n)      Fetch CELL n from address a
!     (n a--)     Store CELL n  to  address a
`@    (a--n)      Fetch BYTE n from address a
`!    (n a--)     Store BYTE n  to  address a


*** REGISTERS ***
  NOTES: 1) Register names are 1 to 3 lowercase characters: [a..zzz]
         2) The number of registers is controlled by the NUM_REGS #define in "config.h".
         3) Register 'i' is the loop index **special**
         4) All other registers are initialized to 0 and are free to use.
xxx  (--a)        a: address of register xxx


*** WORDS ***
        NOTES: 1) Word names are 1 to 3 uppercase characters: [A..ZZZ]
               2) The number of words is controlled by the NUM_FUNCS #define in "config.h"
:     (--)        Define word. Copy chars to (HERE++) until closing ';'.
XXX   (--)        Execute word XXX
;     (--)        Return: PC = rpop()
        NOTE: returning while inside of a loop is not supported; behavior will be undefined.
        NOTE: outside of ':...;', ';' can be used to comment out the rest of the line


*** INPUT/OUTPUT ***
.      (N--)      Output N as decimal number
,      (N--)      Output N as character (Forth EMIT)
"      (--)       Output characters until the next '"'
0..9   (--n)      Scan DECIMAL number until non digit
                     to specify multiple values, separate them by space (4711 3333)
                     to enter a negative number, use "negate" (eg - 490`-)
'x     (--n)      n: the ASCII value of x
_XXX_  (a--a b)   Copies XXX to address a, b is the next address after the NULL terminator.
`Z     (a--)      a: address of a NULL terminated string to print.


*** CONDITIONS/LOOPS/FLOW CONTROL ***
<     (a b--f)    f: (a < b) ? 1 : 0;
=     (a b--f)    f: (a = b) ? 1 : 0;
>     (a b--f)    f: (a > b) ? 1 : 0;
[     (F T--)     FOR: start a For/Next loop. if (T < F), swap T and F
]     (--)        NEXT: increment index (i) and loop if (i@ <= T)
{     (f--f)      BEGIN: if (f == 0) skip to matching }
}     (f--f?)     WHILE: if (f != 0) jump to matching { else drop f and continue
i@    (--n)       n: the index of the current FOR loop
(     (f--)       if (f != 0), execute code in '()', else skip to matching ')'


*** OTHER ***
`BL   (n--)       File: (PC): Load code from file (block-nnn.src). This can be nested.
`FL   (--)        File: Load code from ./Code.S4.
`FS   (--)        File: Save code  to  ./Code.S4.
`FO   (n m--h)    File: Open   - n: file name, m: mode, h: file handle (0 means not opened)
`FC   (h--)       File: Close  - h: file handle
`FD   (n--)       File: Delete - n: file name
`FR   (h--c f)    File: Read   - h: file handle, c: char, n: success?
`FW   (c h--f)    File: Write  - h: file handle, c: char, n: success?
                  NOTE: File operations are enabled by #define __FILES__
`PI   (p--)       Arduino: Pin Input  (pinMode(p, INPUT))
`PU   (p--)       Arduino: Pin Pullup (pinMode(p, INPUT_PULLUP))
`PO   (p--)       Arduino: Pin Output (pinMode(p, OUTPUT)
`PRA  (p--n)      Arduino: Pin Read Analog  (n = analogRead(p))
`PRD  (p--n)      Arduino: Pin Read Digital (n = digitalRead(p))
`PWA  (n p--)     Arduino: Pin Write Analog  (analogWrite(p, n))
`PWD  (n p--)     Arduino: Pin Write Digital (digitalWrite(p, n))
`R    (n--r)      r: a random number in the range [0..(n-1)]
                  NB: if n=0, r is the entire 32-bit random number
`T    (--n)       Milliseconds (Arduino: millis(), Windows: GetTickCount())
`N    (--n)       Microseconds (Arduino: micros(), Windows: N/A)
`W    (n--)       Wait (Arduino: delay(),  Windows: Sleep())
`iAF  (--a)       INFO: a: address of first function vector
`iAH  (--a)       INFO: a: address of HERE variable
`iAR  (--a)       INFO: a: address of first register vector
`iAS  (--a)       INFO: a: address of beeginning of system structure
`iAU  (--a)       INFO: a: address of beeginning of user area
`iF   (--n)       INFO: n: number of words/functions
`iH   (--n)       INFO: n: value of HERE variable
`iR   (--n)       INFO: n: number of registers
`iZ   (--n)       INFO: n: number of bytes in the USER area
`sR   (--)        S4 system reset
`q    (--)        PC: Exit S4
