S4 examples:

; To enter a comment: 
    0( here is a comment )
    ; here is another comment
  
;   if (c) { print("Yes") } else { print("No") }
    c@ #("Yes") _ ("No")

 ; x = (a == b) ? c : d;
    a@ b@ = #(c@$)_(d@) x!;

; To make sure F < T
     S4 code:             %%>($)
     Forth equivalent:    OVER OVER > IF SWAP THEN
     C equivalent:        if (f > t) { int x = f; f = t; t = x; }

; To do something (in this case, execute LP) n times:
    n@ 1[LP]

; To print numbers from F to T:
    S4 code:             1 10[i@.32,]
    Forth equivalent:    f t FOR I . NEXT
    C equivalent:        for (int i = F; i <= T; i)) { printf("%d ", i); }

; One way to copy N bytes from A to B
    :PP 0(a--)$%@1+$!;
    :CPY d! s! 1[s@ `@ d@ `! s PP d PP];     ; Define function CPY
    n@ a@ b@ CPY

; One way to copy N longs from A to B (N A B--)
    :PS 0(n a--)$%@+$!;
    :CPY d! s! 1[s@ @ d@ ! 4 s PS 4 d PS];   ; Define function CPY
    n@ a@ b@ :CPY

; A simple benchmark for a 100 million FOR loop:
    100 1000#** `T$ 1[] `T$-." ms"

; Define a function to display the currently defined code:
    :DC u@h@1-[i@`@#58=(13,10,),];

; To exit S4:
    ``
