0(Genetic evolution)

  1 xBL
 10 xBL

0(401 xBL 0(the "brain"))
0(402 xBL 0(connections))
0(403 xBL 0(critters))
0(404 xBL 0(main))

0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(A crude approximation of TanH)
0(TanH (a--b): b=TanH(a))
:TanH 83*100/ 99 MIN 99_ MAX;

0(----------------------------------------)
0(constants)
 10 sNCR               0(Number of critters)
  8 sNCN               0(Number of connections)
  4 sNHC               0(Number of hidden connections)

100 sWSX               0(World sz X)
 30 sWSY               0(World sz Y)

rWSX rWSY* sWSZ        0(World size)
rNCN 1+ CELLS sCSZ     0(Critter sze)

0(----------------------------------------)
0(Random numbers)
0(Random 8/16-bit #)
:RNDBYTE h100 xR;
:RNDWORD h10000 xR;

0(Random world x/y (--n))
:RWX rWSX xR 1+;         
:RWY rWSY xR 1+;

0(----------------------------------------)
0(world stuff)
VAR sWLD rWSZ ALLOT
:WXN 0 MAX rWSX MIN;   0(World X normalize (--x))
:WYN 0 MAX rWSY MIN;   0(World Y normalize (--y))
0(world set/get at x/y)
:WOFF $ rWSX* + rWLD+;  0(Offset to cell (x y--a))
:WSET WOFF c!;          0(World Set (c x y--))
:WGET WOFF c@;          0(World Get (x y--c))

0(----------------------------------------)
0(----- connections -----)

0(A connection is a single 32-bit value)
0([input]      [output]      [weight])
0([type] [id]  [type] [id]   [weight])
0([0]    [1-7] [8]    [9-15] [16-31])
0(type 0:input/output, 1:hidden)

0(ConnTID (n--t id): Connection type/id)
:ConnTID 128& % 16 $(\rNHC) ^;
0(connection weight (a--w))
:CONN_WT 2+ WDR 81/;
0(dump connection DumpConns (a--))
:DumpTID ConnTID $"(%d,%d)";
:DumpConns # c@ N" in:"DumpTID #1+ c@", out:"DumpTID CONN_WT", wt:"#.TanH" (%d)";

0(----------------------------------------)
0(critters)
0(Critter structure: 4 bytes + connections)
0([x][y][col][0][connections])

0(rCR: Current critter)
0(rCRS: Critters start)
VAR sCRS
rNCR rCSZ * ALLOT

:CrAddr 1- rCSZ* rCRS+;       0(CrAddr (N--A): A: address of critter #N)
:CrSet CrAddr sCR;            0(CrSet (n--): Set critter)
:CrXY rCR c@ rCR 1+ c@;       0(Critter Get XY(--x y))
:CrSX WXN rCR c!;             0(Critter Set X(n--))
:CrSY WYN rCR 1+ c!;          0(Critter Set Y(n--))
:CrRXY RWX CrSX RWY CrSY;     0(Critter Set Random XY(--))
:CrGetCol rCR 3+ c@;          0(--n)
:CrRndCol 8xR 31+ rCR 3+ c!;  0(--)
:CrPaint CrXY GOTOXY CrGetCol 40 SETCOL "*";
:CrPaintAll CUROFF 1 rNCR[rI CrSet CrPaint] CLRCOL CURON;

0(Create a Random Critter(s))
:CrRand rCR s1 1 rCSZ[256 xR r1 c! i1] CrRXY CrRndCol;
:CrRandAll 1 rNCR[rI CrSet CrRand];

0(Dump critters)
:CrDump CrGetCol CrXY$"xy: (%d,%d), col: %d, %n" rCR CELL+ s1 1 rNCN[r1 DumpConns n1 CR];
:CrDumpAll 1 rNCR[rI "Critter #%d: " rI CrSet CrDump CR];

0(FlipBit (a--b): Flip one random bit)
:FlipBit 1 8xR SHL %% b&(b~b&;)b|;

0(CopyByte (a--b): Copy 1 byte w/possible mutation)
:CopyByte 125 xR 7=(FB;);

0(CrCopy (F T--): Copy critter at F to critter at T)
:CrCopy s2 s1 1 rCSZ[r1 c@ CopyByte r2 c! i1 i2];

0(CrCopyTo (T--): Copy Current critter to critter #T)
:CrCopyTo rCR s9 CrSet r9 rCR CrCopy CrRXY r9 sCR;

0(CrRandAll CrDumpAll)
:CrDemo CLS 1{\ CrRandAll CrPaintAll xK? 0=}xK@ \ 1 rWSY GOTOXY;

0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(-RELOAD BLOCK-)
:RL 400 xBL;
