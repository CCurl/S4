0(Genetic evolution)

  1 xBL
 10 xBL
401 xBL 0(the "brain")
402 xBL 0(connections)
403 xBL 0(critters)
404 xBL 0(main)

0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(A crude approximation of TANH)
0(TANH (a--b): b=TanH(a);
:TANH 83*100/ 99 MIN 99_ MAX;

0(----------------------------------------)
0(constants)
 10 sNCR               0(Number of critters)
  8 sNCN               0(Number of connections)
  4 sNHC               0(Number of hidden connections)

100 sWSX               0(World sz X)
 30 sWSY               0(World sz Y)

rWSX rWSY* sWSZ        0(World size)
rNCN 4* 4+ sCSZ        0(Critter sze)

0(----------------------------------------)
0(Random numbers)
0(Random 8/16-bit #)
:RNDBYTE h100 xR;
:RNDWORD h10000 xR;

0(Random world x/y (--n))
:RWX rWSX xR 1+;         
:RWY rWSY xR 1+;

0(----------------------------------------)
0(world stuff)
VAR sWLD rWSZ ALLOT
:WXN 0 MAX rWSX MIN;   0(World X normalize (--x))
:WYN 0 MAX rWSY MIN;   0(World Y normalize (--y))
0(world set/get at x/y)
:WOFF $ rWSX* + rWLD+;  0(Offset to cell (x y--a))
:WSET WOFF c!;          0(World Set (c x y--))
:WGET WOFF c@;          0(World Get (x y--c))

0(----------------------------------------)
0(----- connections -----)

0(A connection is a single 32-bit value)
0([input]      [output]      [weight])
0([type] [id]  [type] [id]   [weight]
0([0]    [1-7] [8]    [9-15] [16-31])
0(type 0:input/output, 1:hidden)

0(connection/nodes)
0(num connections)
0(Type/ID (n--t id))
:CONN.TID 128& % 16 $(\rNHC) ^;
0(connection weight (a--w))
:CONN.WT 2+ WDR 81/;
0(dump connection DCN (a--))
:CONN.DUMP CONN.TID $"(%d,%d)";
:DCN # c@ N" in:"CONN.DUMP #1+ c@", out:"CONN.DUMP CONN.WT", wt:"#." ("TANH.")";

0(----------------------------------------)
0(critters)
0(Critter structure: 4 bytes + connections)
0([x][y][col][0][connections])

0(num critters)
100 sNCR
0(critter size)
rNCN xIC* 4+ sCSZ

0(rCR: Current critter)
0(rCRS: Critters start)
VAR sCRS
rNCR rCSZ * ALLOT

0(CR.ADDR (N--A): A: address of critter #N)
:CR.ADDR 1- rCSZ* rCRS+;

0(CR.SET (n--): Set critter)
:CR.SET CR.ADDR sCR;

:CR.XY rCR c@ rCR 1+ c@;       0(Critter Get XY(--x y))
:CR.SX WXN rCR c!;             0(Critter Set X(n--))
:CR.SY WYN rCR 1+ c!;          0(Critter Set Y(n--))
:CR.RXY RWX CR.SX RWY CR.SY;   0(Critter Set Random XY(--))
:CR.SETCOL rCR 3+ c!;          0(n--)
:CR.GETCOL rCR 3+ c@;          0(--n)
:CR.RNDCOL 8xR 31+ CR.SETCOL;  0(--)
:CR.PAINT CR.XY GOTOXY CR.GETCOL 40 SETCOL "*";
:PAINTALL CUROFF 1 rNCR[rI CR.SET CR.PAINT]CLRCOL CURON;

0(Create a Random Critter(s))
:CR.RAND rCR s1 1 rCSZ[256 xR r1 c! i1] CR.RXY CR.RNDCOL;
:CR.RAND.ALL 1 rNCR[rI CR.SET CR.RAND];

0(Dump critter(s))
:CR.DUMP CR.GETCOL CR.XY$"xy: (%d,%d), col: %d, %n" rCR 4+ s1 1 rNCN[r1 DCN r1 4+ s1 CR];
:CR.DUMP.ALL 1 rNCR[rI "Critter #%d: " rI CR.SET CR.DUMP CR];

0(FLIP.BIT (a--b): Flip one random bit)
:FLIP.BIT 1 8xR SHL %% b&(b~b&;)b|;

0(COPY.BYTE (a--b): Copy 1 byte w/possible mutation)
:COPY.BYTE 125 xR 7=(FB;);

0(CR.COPY (F T--): Copy critter at F to critter at T)
:CR.COPY s2 s1 1 rCSZ[r1 c@ COPY.BYTE r2 c! i1 i2];

0(CR.COPY.TO (T--): Copy Current critter to critter #T)
:CR.COPY.TO rCR s9 CR.SET r9 rCR CR.COPY CR.RXY CR.RNDCOL r9 sCR;

0(CR.RAND.ALL CR.DUMP.ALL)
:CR.DMO 1{\ CR.RAND.ALL CR.PAINT.ALL xK? 0=}xK@ \;

0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(------------------------------------------------------------------------------)
0(-RELOAD BLOCK-)
:RL 400 xBL;
